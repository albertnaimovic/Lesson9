# squares = [number * number for number in range(10) if number != 5]
# print(squares)

# 1. Find all of the numbers from 1-1000 that are divisible by 6.

# print([number for number in range(0, 1000) if number % 6 == 0])

# 2. Find all number from 1-1000 that have 9 in them.

# print([number for number in range(1000) if str(number).__contains__('9')])


# s = "testing"
# print(len(s))
# char_count = len(s)
# if char_count % 2 == 0:
#     offset = int(len(s) / 2)
#     print(s[offset-1: offset + 1])
# else:
#     offset = int(len(s) / 2)
#     print(s[offset])


# squares = {i: i * i for i in range(10) if i % 2 != 0}
# print(squares)


# 0. 
# start_list = list(range(15, 21))
# my_list = []
# for i, v in enumerate(start_list):
#     if i % 2 != 0:
#         print(v)

# # 3. Given string: text = 'In this lecture we will review some additional functionalities of python built-in data structures.' calculate how many words have letter 'e' in it.

# text = 'In this lecture we will review some additional functionalities of python built-in data structures.'
# my_list = text.split(" ")
# print(f"There is {len([word for word in my_list if 'e' in word])} words that have letter 'e'")

# 4. Given the same string as in previous exercise: calculate count of words that have more than 5 characters.

# text = 'In this lecture we will review some additional functionalities of python built-in data structures.'
# my_list = text.split(" ")
# print(f"There is {len([word for word in my_list if len(word) > 5])} words that more than 5 characters")

# 5. Given the same string calculate the occurrence of each letter in the string. (HINT: store everything in dictionary)

# text = 'In this lecture we will review some additional functionalities of python built-in data structures.'
# text = text.replace(" ", "")
# text = text.replace(".", "")
# text = text.replace("-", "")

# letters_list = []

# for word in text:
#     letters_list.extend(word.lower())

# unique_letters_set = sorted(set(letters_list))

# my_dictionary = {}
# for item in unique_letters_set:
#     my_dictionary[item] = letters_list.count(item)
# print(f"Result is: {my_dictionary}")

# 6. Write a program that checks if given number is a perfect square.

# import math
# num_check = int(input("Enter number: "))

# if num_check % math.sqrt(num_check) == 0:
#     print("Number IS perfect square")
# else:
#     print("Number IS NOT perfect square")


# a, b, c = ([1,2,2,3,2,2,2],[5,3,2,2,3,5],[7,3,2,2,5]) # turi gautis 7


# list_a = [number for number in a if number in b and number in c]
# list_b = [number for number in b if number in a and number in c]
# list_c = [number for number in c if number in b and number in a]

# print(len(list_a), len(list_b), len(list_c))
# print(list_a, list_b, list_c)

# if len(list_a) < len(list_b) and len(list_a) < len(list_c):
#     shortest_list = list_a
# elif len(list_b) < len(list_a) and len(list_b) < len(list_c):
#     shortest_list = list_b
# else:
#     shortest_list = list_c
# print(sum(shortest_list))

# abc = [12363, 3256, 3680, 12786, 5777, 7533, 6981, 13981, 2381, 33, 11898, 14143, 5018, 13023, 10229, 6550, 13967, 8733, 2680, 12424, 12280, 6920, 3229, 12103, 9897, 1936, 11552, 9764, 1877, 6485, 3133, 3349, 10071, 9969, 2162, 4240, 11716, 3546, 14416, 7688, 13285, 1314, 739, 14587, 12246, 14038, 7187, 7011, 13554, 12109, 2917, 4922, 8449, 9763, 3695, 624, 9172, 10596, 12800, 620, 2693, 1496, 10440, 9200, 1449, 1014, 8748, 5544, 439, 3329, 8300, 7471, 10440, 10988, 10636, 544, 6559, 13459, 13016, 9120, 6394, 5582, 11314, 6974, 6222, 6388, 5841, 10616, 8817, 11929, 3070, 14569, 13554, 741, 13353, 10238, 14637, 13197, 1877, 4018, 1941, 13229, 14049, 8558, 7339, 13032, 4068, 5818, 14698, 1060, 661, 11384, 7396, 6993, 7068, 13326, 6202, 14691, 10934, 6378, 4533, 1208, 5881, 5870, 9120, 9552, 9110, 3673, 10693, 52, 5895, 1224, 2176, 13508, 8155, 11984, 5186, 3477, 8950, 14339, 10819, 12704, 6389, 12061, 5774, 10371, 8055, 12771, 14781, 682, 7890, 3340, 6411, 7637, 14355, 12871, 1660, 4528, 11670, 5561, 2643, 7538, 857, 11766, 3749, 6195, 2667, 8545, 5080, 11245, 6228, 7600, 12706, 403, 1224, 8757, 11382, 7017, 9120, 10598, 3172, 396, 5985, 7963, 9764, 10322, 1338, 1580, 14511, 6583, 5476, 12389, 13311, 2810, 7327, 5084, 13639, 8927, 2073, 8998, 14255, 8813, 4551, 10597, 10570, 11929, 1801, 12161, 11542, 7512, 7512, 11429, 11929, 9605, 10866, 5753, 12989, 5313, 12093, 8745, 11144, 11005, 7941, 5144, 12190, 13044, 8523, 6657, 14957, 8243, 13023, 2938, 1338, 3364, 1657, 3141, 13016, 13945, 13131, 5209, 5777, 1455, 10414, 10552, 10330, 8300, 13442, 7039, 3687, 2176, 7823, 1810, 2106, 14796, 8076, 12456, 9439, 2176, 12319, 1995, 14428, 9897, 3482, 3778, 8113, 863, 9511, 11456, 10831, 1007, 11444, 14410, 12819, 7541, 11429, 13010, 14240, 5617, 10896, 2093, 2089, 4922, 7215, 14479, 9246, 1278, 4282, 11531, 12088, 5277, 12538, 4762, 14152, 1380, 12109, 10354, 2234, 4962, 1669, 3349, 8645, 4032, 4415, 10104, 6566, 364, 1222, 11920, 6347, 4551, 12098, 7108, 14369, 13382, 203, 7828, 5771, 3913, 14830, 7876, 2553, 1122, 10819, 701, 4532, 7732, 8604, 4018, 12777, 11519, 7138, 1076, 11245, 7644, 2143, 1147, 5047, 10375, 4623, 11986, 5318, 4488, 10934, 9179, 7890, 12250, 1147, 9743, 9229, 2553, 10091, 1731, 9764, 12711, 11726, 12901, 10198, 12394, 404, 6559, 5659, 3176, 5192, 10688, 12167, 8606, 7379, 7187, 3642, 3695, 2631, 14119, 2667, 5662, 4762, 14948, 11677, 2693, 6560, 7996, 3467, 6271, 4239, 5870, 5318, 11828, 11736, 6324, 12690, 2396, 10844, 4030, 9079, 11006, 12653, 14035, 3583, 5405, 9908, 5775, 11106, 14870, 11382, 923, 7516, 1861, 12805, 3341, 4551, 11095, 13844, 280, 10707, 10866, 14206, 3928, 11380, 8514, 13032, 7372, 9237, 12991, 6560, 1278, 14373, 4527, 4922, 10467, 10706, 11105, 2547, 1312, 14964, 2547, 10831, 9456, 10477, 280, 4315, 5093, 8611, 6344, 11913, 14035, 7278, 13159, 10089, 573, 13709, 6325, 14159, 5533, 7727, 3673, 2282, 4790, 620, 9276, 10844, 9835, 12423, 7407, 10680, 11314, 9624, 13709, 9552, 3933, 14389, 7407, 10333, 8233, 9913, 3834, 582, 13457, 12239, 10182, 13461, 8442, 14427, 8748, 106, 6876, 12363, 11438, 9488, 1558, 1230, 4011, 10182, 3507, 12901, 10174, 1668, 14494, 8745, 4524, 12624, 5144, 14231, 6005, 5629, 12851, 11981, 10831, 6222, 3133, 384, 709, 404, 11738, 7516, 2693, 5388, 2113, 6422, 2968, 5185, 4528, 6783, 9738, 2938, 12676, 7215, 1455, 9944, 12605, 3133, 11426, 1787, 7741, 1797, 8471, 2577, 12372, 511, 6199, 14049, 7157, 3219, 3682, 14551, 13753, 3952, 2819, 1237, 3537, 9727, 8437, 280, 13305, 11929, 6481, 1644, 7106, 3482, 7435, 9626, 4974, 1684, 7639, 9482, 7082, 1314, 14119, 7109, 2053, 6736, 12970, 8243, 11930, 5352, 6730, 4567, 5678, 11144, 3523, 573, 11913, 5023, 7533, 4106, 10636, 8923, 2577, 13159, 14747, 7688, 7800, 9401, 12319, 3734, 4063, 11095, 10477, 7958, 8248, 3049, 11106, 1495, 3077, 14698, 7948, 10797, 10338, 7658, 4623, 13528, 8645, 974, 6417, 14679, 13603, 7823, 12703, 7001, 12029, 14049, 7491, 8950, 1414, 685, 6102, 13201, 9714, 11106, 6755, 11230, 3049, 6979, 8155, 11981, 983, 10470, 7339, 13530, 3504, 4386, 7017, 298, 9187, 10440, 7974, 14256, 5265, 5313, 9263, 11260, 317, 10093, 5785, 11332, 497, 2234, 1278, 2948, 5027, 5287, 5181, 7112, 2023, 13261, 6893, 7890, 4989, 5918, 6440, 5453, 7183, 5803, 13639, 1510, 10720, 11524, 9136, 14793, 9667, 8706, 4389, 13229, 1569, 3609, 6713, 5384, 1786, 7512, 7965, 2075, 9054, 6513, 12773, 1249, 4639, 1147, 3537, 11885, 14142, 11582, 10174, 661, 6541, 2545, 14588, 3239, 5708, 14551, 106, 13353, 6119, 12272, 7819, 10587, 1237, 2982, 1932, 7974, 5492, 14410, 8935, 7253, 10809, 6690, 6273, 2848, 1917, 13709, 11003, 12786, 7471, 5424, 2158, 13485, 6755, 8965, 9200, 1932, 10322, 4607, 2279, 33, 7435, 13083, 5829, 2546, 9200, 6063, 12690, 9606, 6979, 11754, 1008, 8024, 13945, 5406, 13733, 14540, 13558, 8794, 4997, 11046, 3841, 12062]
# print(sum(abc))

# cba = set(abc)
# print(sum(cba))

